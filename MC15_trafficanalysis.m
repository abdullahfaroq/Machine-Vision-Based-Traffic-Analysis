clear all
clc
v = VideoReader("RoadTraffic.mp4");
vw = VideoWriter("FilteredVideo.mp4", "MPEG-4");
vw.FrameRate = v.FrameRate;

% Selecting the reference frame
ref_frame = im2gray(im2double(read(v, 1)));
ref_frame = imgaussfilt(ref_frame, 0.80);

% Initialize arrays to store region properties
Number_Region = zeros(1, v.NumFrames);
all_Mean_Region_Size = zeros(1, v.NumFrames);
all_Total_Region_Size = zeros(1, v.NumFrames);

open(vw);
for idx = 2:v.NumFrames  
    % Accessing all frames
    frames = im2double(read(v, idx));
    % Removing the Noise
    frame_i = imgaussfilt(frames, 1.5);
    % Converting them into Gray levels
    Gray_Image = im2gray(frame_i);
    % Subtracting from the reference frame
    x = abs(Gray_Image - ref_frame);
    %Segmenting out the frames 
    [BW, ~] = segmentImage(x);
    
    % Labeling connected regions
    [~,Number_Region(idx)] = bwlabel(BW);

    % Calculate region properties
    props = regionprops('table', BW, 'BoundingBox','Area');
    all_Mean_Region_Size(idx) = mean(props.Area);  % Mean region size
    all_Total_Region_Size(idx) = sum(props.Area);  % Total region size

    % Draw bounding boxes on the original frame
    CarBox = insertShape(frame_i, 'Rectangle', props.BoundingBox, 'LineWidth', 3, 'Color', 'green');
    writeVideo(vw, CarBox);
end
close(vw);

% Creating a table
frameNumbers = 1:v.NumFrames; 
CarData = table(frameNumbers', Number_Region', all_Mean_Region_Size', all_Total_Region_Size', 'VariableNames', {'Frame-Number', 'Number of Regions', 'Mean Region Size', 'Total Region Size'});
%disp(CarDAta);

fig = figure;
uitable('Data', table2cell(CarData), 'ColumnName', CarData.Properties.VariableNames, 'RowName', [], 'Units', 'Normalized', 'Position', [0, 0, 1, 1]);
title('Statistical Analyses Table');







% Image segmentor function
function [BW,maskedImage] = segmentImage(x)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(X) segments image X using auto-generated
%  code from the imageSegmenter app. The final segmentation is returned in
%  BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 20-Nov-2023
%----------------------------------------------------
% Adjust data to span data range.
x = imadjust(x);

% Threshold image - manual threshold
BW = x > 1.333300e-01;

% Open mask with disk
radius = 7;
decomposition = 0;
se = strel('disk', radius, decomposition);
BW = imopen(BW, se);
% Close mask with disk
radius = 22;
decomposition = 0;
se = strel('disk', radius, decomposition);
BW = imclose(BW, se);
% Create masked image.
maskedImage = x;
maskedImage(~BW) = 0;
end